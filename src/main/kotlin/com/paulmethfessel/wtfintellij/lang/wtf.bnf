{
    parserClass="com.paulmethfessel.wtfintellij.lang.WtfParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Wtf"
    psiImplClassSuffix="Impl"
    psiPackage="com.paulmethfessel.wtfintellij.lang.psi"
    psiImplPackage="com.paulmethfessel.wtfintellij.lang.psi.impl"

    elementTypeHolderClass="com.paulmethfessel.wtfintellij.lang.psi.WtfTypes"
    elementTypeClass="com.paulmethfessel.wtfintellij.lang.psi.WtfElementType"
    tokenTypeClass="com.paulmethfessel.wtfintellij.lang.psi.WtfTokenType"

    psiImplUtilClass="com.paulmethfessel.wtfintellij.lang.WtfPsiImplUtil"

    // Tokens are only used for Live Preview, for plugin use .flex file. Don't regenerate it from the bnf (it has custom logic)
    tokens=[
        PACKAGE='package'
        USE='use'
        LET='let'
        VAR='var'
        RECORD='record'
        RESOURCE='resource'
        FUNC='func'
        ENUM='enum'
        VARIANT='variant'
        IF='if'
        ELSE='else'
        WHILE='while'
        FOR='for'
        IN='in'
        RETURN='return'
        MATCH='match'
        BREAK='break'
        CONTINUE='continue'
        CONSTRUCTOR='constructor'
        TRUE='true'
        FALSE='false'

        PLUS='+'
        MINUS='-'
        SLASH='/'
        STAR='*'
        AND='&&'
        OR='||'
        LT='<'
        GT='>'
        LE='<='
        GE='>='
        ASSIGN='='
        EQUAL='=='
        NOT_EQUAL='!='
        EXCLAMETION='!'
        QUESTION='?'
        COLON=':'
        AT='@'
        DOT='.'
        LEFT_BRACE='{'
        RIGHT_BRACE='}'
        LEFT_PAREN='('
        RIGHT_PAREN=')'
        COMMA=','
        RIGHT_ARROW='->'
        QUOTE='"'
        SINGLE_QUOTE="'"
        BACK_SLASH='\'
        BACK_SLASH_PAREN='\('

        NEW_LINE='regexp:\n'

        WHITESPACE='regexp:[ \t]+'
        IDENTIFIER='regexp:[_a-z][_a-zA-Z0-9]*'
        //VERSION='regexp:[a-z0-9][_a-zA-Z0-9-]*(\.[_a-zA-Z0-9-]+)*'
        COMMENT='regexp://.*'

        INTEGER='regexp:\d+'
        FLOAT='regexp:(\d+\.\d*)|(\d*\.\d+)'
    ]

    extends(".*expr")=expr
    extends(".*stmt")=stmt
}

wtfFile ::= nl? package_declaration nl? (declaration (nl declaration)*)? nl?

nl ::= NEW_LINE+

// DECLARATIONS
private declaration ::= use_declaration | record_declaration | resource_declaration | enum_declaration | variant_declaration | func_declaration

package_declaration ::= PACKAGE package_namespace ':' package_name ('@' package_version)?
package_namespace ::= IDENTIFIER
package_name ::= IDENTIFIER
// TODO add VERSION to lexer again
package_version ::= INTEGER

use_declaration ::= USE use_namespace ':' use_package '/' use_interface '.' '{' nl? use_items nl? '}'
use_namespace ::= IDENTIFIER
use_package ::= IDENTIFIER
use_interface ::= IDENTIFIER
private use_items ::= use_item (nl? ',' nl? use_item)*
use_item ::= IDENTIFIER

record_declaration ::= RECORD record_name nl? '{' nl? (typed_identifier (nl typed_identifier)*)? nl? '}'
record_name ::= named_identifier

resource_declaration ::= RESOURCE resource_name nl? '{' nl? (resource_item (nl resource_item)*)? nl? '}'
private resource_item ::= typed_identifier | resource_constructor | resource_method
resource_constructor ::= CONSTRUCTOR nl? '(' func_arguments ')' nl? '{' func_body '}'
resource_method ::= FUNC nl? function_name nl? '(' func_arguments ')' nl? ('->' nl? type_identifier)? nl? '{' func_body '}'
resource_name ::= named_identifier

enum_declaration ::= ENUM enum_name nl? '{' nl? (enum_value (nl enum_value)*)? nl? '}'
enum_name ::= named_identifier
enum_value ::= IDENTIFIER

variant_declaration ::= VARIANT variant_name nl? '{' nl? (variant_value (nl variant_value)*)? nl? '}'
variant_name ::= named_identifier
variant_value ::= IDENTIFIER nl? '(' nl? (typed_identifier (nl? ',' nl? typed_identifier)*)? nl? ')'

func_declaration ::= FUNC nl? function_name nl? '(' func_arguments ')' nl? ('->' nl? type_identifier)? nl? '{' func_body '}'
function_name ::= named_identifier

typed_identifier ::= named_identifier ':' type_identifier

private func_arguments ::= nl? (func_argument (',' func_argument)*)? nl?
func_argument ::= typed_identifier

// FUNCTION STATEMENTS / EXPRESSIONS
func_body ::= nl? (stmt (nl stmt)*)? nl?

stmt ::= variable_declaration_stmt | variable_assignment_stmt | call_stmt | return_stmt

variable_declaration_stmt ::= (LET | VAR) nl? named_identifier nl? '=' nl? expr //{pin=1 recoverWhile=stmt_recover}

variable_assignment_stmt ::= reference_expr nl? '=' nl? expr //{pin=3 recoverWhile=stmt_recover}

call_stmt ::= call_expr

return_stmt ::= RETURN expr //{pin=1 recoverWhile=stmt_recover}

//private stmt_recover ::= !(LET | RETURN | NEW_LINE)

expr ::= unary_expr | binary_expr | reference_expr | primary

parenthesized_expr ::= '(' nl? expr nl? ')' {pin=1}

binary_expr ::= expr binary_operator nl? expr
private binary_operator ::= PLUS | MINUS | SLASH | STAR | AND | OR | LT | LE | GT | GE | EQUAL | NOT_EQUAL

unary_expr ::= unary_operator expr
private unary_operator ::= PLUS | MINUS | EXCLAMETION

reference_expr ::= initial_reference_expr (nl? DOT nl? (call_expr | IDENTIFIER))*
private initial_reference_expr ::= variable | call_expr | parenthesized_expr

call_expr ::= named_identifier nl? LEFT_PAREN nl? call_args nl? RIGHT_PAREN { rightAssociative=true }
private call_args ::= (expr nl? (COMMA nl? expr nl?)? COMMA?)?

variable ::= IDENTIFIER {
    methods=[getReferences]
}

private primary ::= literal_expr

literal_expr ::= INTEGER
    | FLOAT
    | string
    | TRUE
    | FALSE

string ::= '"' (STRING_CONTENT | string_expression)* '"'
string_expression ::= STRING_LEFT_PAREN expr STRING_RIGHT_PAREN

named_identifier ::= IDENTIFIER {
    mixin="com.paulmethfessel.wtfintellij.lang.psi.WtfNamedElementImpl"
    implements="com.paulmethfessel.wtfintellij.lang.psi.WtfNamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}

type_identifier ::= IDENTIFIER